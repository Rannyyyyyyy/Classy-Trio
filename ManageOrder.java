/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.awt.Color;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.Connection;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;

/**
 *
 * @author 63936
 */
public class ManageOrder extends javax.swing.JFrame {

    private int productPk = 0;
    private int customerPk = 0;
    private int finalTotalPrice = 0;
    
    private String orderId = "";

    /**
     * Creates new form ManageOrder
     */
    public ManageOrder() {
        initComponents();
        setLocationRelativeTo(null);
        centerTableText();
        centerTableHeader();
        tableProduct.setAutoCreateRowSorter(true);
    }

    private void centerTableText() {
        // Create a cell renderer to center text
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        // Apply the renderer to all columns in jTable1
        for (int i = 0; i < tableProduct.getColumnCount(); i++) {
            tableProduct.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        DefaultTableCellRenderer centerRenderer1 = new DefaultTableCellRenderer();
        centerRenderer1.setHorizontalAlignment(JLabel.CENTER);

        for (int i = 0; i < tableCart.getColumnCount(); i++) {
            tableCart.getColumnModel().getColumn(i).setCellRenderer(centerRenderer1);
        }
    }

    private void centerTableHeader() {
        // Get the table header
        JTableHeader header = tableProduct.getTableHeader();
        JTableHeader header1 = tableCart.getTableHeader();

        // Create a custom renderer for the header
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) header.getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(JLabel.CENTER);

        // Apply the renderer to the header
        header.setDefaultRenderer(headerRenderer);

        DefaultTableCellRenderer headerRenderer1 = (DefaultTableCellRenderer) header1.getDefaultRenderer();
        headerRenderer1.setHorizontalAlignment(JLabel.CENTER);

        // Apply the renderer to the header
        header1.setDefaultRenderer(headerRenderer);
    }

    // Method to calculate balance
    private void calculateBalance() {
        try {
            // Get payment amount from txtPay
            int payAmount = Integer.parseInt(txtPay.getText());

            // Calculate the balance
            int balance = payAmount - finalTotalPrice;

            // Display the balance
            if (balance < 0) {
                JOptionPane.showMessageDialog(null, "Insufficient payment! You need ₱" + Math.abs(balance) + " more.");
            } else {
                txtBal.setText("₱" + balance);
                // Optionally reset the cart and fields after successful payment
                finalTotalPrice = 0;
                txtTotal.setText("");
                txtPay.setText("");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid payment amount! Please enter a valid number.");
        }
    }

    private void clearProduct() {
        productPk = 0;
        txtProductName.setText("");
        txtProductPrice.setText("");
        txtProductExpired.setText("");
        txtOrderQuantity.setText("");

    }

    public String getUniqueId(String prefix) {
        return prefix + System.nanoTime();
    }

    private boolean validateFields(String formType) {
        if (formType.equals("edit") && !txtProductName.getText().equals("") && !txtProductPrice.getText().equals("") && !txtProductExpired.getText().equals("") && !txtOrderQuantity.getText().equals("")) {
            return false;
        } else {
            return !(formType.equals("new") && !txtProductName.getText().equals("") && !txtProductPrice.getText().equals("") && !txtProductExpired.getText().equals("") && !txtOrderQuantity.getText().equals(""));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel16 = new javax.swing.JLabel();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtProductPrice = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtProductExpired = new javax.swing.JTextField();
        btnSaveOrder = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtOrderQuantity = new javax.swing.JTextField();
        btnAddToCart = new javax.swing.JButton();
        btnclose = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProduct = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCart = new javax.swing.JTable();
        txtPay = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtBal = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        jLabel16.setForeground(new java.awt.Color(0, 255, 255));
        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg.png"))); // NOI18N
        jLabel16.setText("jLabel16");

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("File");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar3.add(jMenu6);

        jMenu7.setText("File");
        jMenuBar4.add(jMenu7);

        jMenu8.setText("Edit");
        jMenuBar4.add(jMenu8);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(10, 30, 170));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 466, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 153, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Powerhouse Sans", 1, 30)); // NOI18N
        jLabel3.setText("Product List");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, -1, -1));

        jLabel4.setFont(new java.awt.Font("Powerhouse Sans", 1, 30)); // NOI18N
        jLabel4.setText("Cart");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 10, -1, -1));

        jLabel6.setFont(new java.awt.Font("Powerhouse Sans", 1, 20)); // NOI18N
        jLabel6.setText("Selected Product:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 330, -1, -1));

        jLabel9.setFont(new java.awt.Font("Powerhouse Sans", 0, 18)); // NOI18N
        jLabel9.setText("Product Name");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 370, -1, -1));

        txtProductName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtProductName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtProductName.setActionCommand("<Not Set>");
        txtProductName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductNameActionPerformed(evt);
            }
        });
        jPanel1.add(txtProductName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 400, 400, 30));

        jLabel11.setFont(new java.awt.Font("Powerhouse Sans", 0, 18)); // NOI18N
        jLabel11.setText("Product Price");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 440, -1, -1));

        txtProductPrice.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtProductPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtProductPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtProductPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductPriceActionPerformed(evt);
            }
        });
        jPanel1.add(txtProductPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 470, 400, 30));

        jLabel13.setFont(new java.awt.Font("Powerhouse Sans", 0, 18)); // NOI18N
        jLabel13.setText("Product Expires On");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 520, -1, -1));

        txtProductExpired.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtProductExpired.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtProductExpired.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtProductExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductExpiredActionPerformed(evt);
            }
        });
        jPanel1.add(txtProductExpired, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 550, 400, -1));

        btnSaveOrder.setBackground(new java.awt.Color(0, 20, 82));
        btnSaveOrder.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSaveOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveOrder.setText("ENTER");
        btnSaveOrder.setBorder(new javax.swing.border.MatteBorder(null));
        btnSaveOrder.setDefaultCapable(false);
        btnSaveOrder.setOpaque(true);
        btnSaveOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveOrderMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveOrderMouseExited(evt);
            }
        });
        btnSaveOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveOrderActionPerformed(evt);
            }
        });
        jPanel1.add(btnSaveOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 580, 200, 50));

        jButton2.setBackground(new java.awt.Color(0, 20, 82));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("REFRESH");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton2MouseExited(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 650, 200, 50));

        jLabel14.setFont(new java.awt.Font("Powerhouse Sans", 0, 20)); // NOI18N
        jLabel14.setText("Order Quantity");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 590, -1, -1));

        txtOrderQuantity.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtOrderQuantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtOrderQuantity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtOrderQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderQuantityActionPerformed(evt);
            }
        });
        jPanel1.add(txtOrderQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 620, 210, 40));

        btnAddToCart.setBackground(new java.awt.Color(0, 20, 82));
        btnAddToCart.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddToCart.setForeground(new java.awt.Color(255, 255, 255));
        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddToCartMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddToCartMouseExited(evt);
            }
        });
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddToCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 670, 210, 40));

        btnclose.setBackground(new java.awt.Color(204, 0, 0));
        btnclose.setForeground(new java.awt.Color(255, 255, 255));
        btnclose.setText("Close");
        btnclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncloseActionPerformed(evt);
            }
        });
        jPanel1.add(btnclose, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 710, 100, 30));

        jLabel12.setBackground(new java.awt.Color(204, 0, 0));
        jLabel12.setFont(new java.awt.Font("Powerhouse Sans", 1, 24)); // NOI18N
        jLabel12.setText("TOTAL:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 370, -1, -1));

        tableProduct.setAutoCreateRowSorter(true);
        tableProduct.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        tableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Quantity", "Price", "Expiration Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProduct.setAlignmentX(7.0F);
        tableProduct.setAlignmentY(7.0F);
        tableProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableProduct.setGridColor(new java.awt.Color(255, 255, 255));
        tableProduct.setRowHeight(30);
        tableProduct.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tableProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableProductMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tableProductMouseExited(evt);
            }
        });
        jScrollPane2.setViewportView(tableProduct);
        if (tableProduct.getColumnModel().getColumnCount() > 0) {
            tableProduct.getColumnModel().getColumn(0).setResizable(false);
            tableProduct.getColumnModel().getColumn(1).setResizable(false);
            tableProduct.getColumnModel().getColumn(2).setResizable(false);
            tableProduct.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 680, 260));

        tableCart.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        tableCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Quantity", "Price", "Expiration Date", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableCart.setGridColor(new java.awt.Color(255, 255, 255));
        tableCart.setRowHeight(30);
        tableCart.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tableCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCartMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableCart);
        if (tableCart.getColumnModel().getColumnCount() > 0) {
            tableCart.getColumnModel().getColumn(0).setResizable(false);
            tableCart.getColumnModel().getColumn(1).setResizable(false);
            tableCart.getColumnModel().getColumn(2).setResizable(false);
            tableCart.getColumnModel().getColumn(3).setResizable(false);
            tableCart.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 60, 650, 260));

        txtPay.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtPay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPayActionPerformed(evt);
            }
        });
        jPanel1.add(txtPay, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 430, 130, 40));

        jLabel1.setFont(new java.awt.Font("Powerhouse Sans", 1, 24)); // NOI18N
        jLabel1.setText("CASH:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 440, -1, -1));

        txtTotal.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });
        jPanel1.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 360, 130, 40));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("CHANGE:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 510, -1, 30));

        txtBal.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtBal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBalActionPerformed(evt);
            }
        });
        jPanel1.add(txtBal, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 500, 110, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1410, 750));

        jMenuBar1.setBackground(new java.awt.Color(51, 255, 255));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setToolTipText("");
        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jMenu1.setText("INVENTORY");

        jMenuItem2.setText("BATCH 1");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("BATCH 2");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("BATCH 3");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem6.setText("BATCH 4");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu10.setText("HISTORY");
        jMenu10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu10ActionPerformed(evt);
            }
        });

        jMenuItem5.setText("HISTORY");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem5);

        jMenuBar1.add(jMenu10);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        txtTotal.setEditable(false);
        txtBal.setEditable(false);

        txtProductName.setEditable(false);
        txtProductPrice.setEditable(false);
        txtProductExpired.setEditable(false);

        DefaultTableModel productModel = (DefaultTableModel) tableProduct.getModel();
        DefaultTableModel batchModel = (DefaultTableModel) tableProduct.getModel();
        DefaultTableModel batchoneModel = (DefaultTableModel) tableProduct.getModel();
        DefaultTableModel batchtwoModel = (DefaultTableModel) tableProduct.getModel();

        try {
            Connection con = MyConnection.getConnection();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select *from product");
            while (rs.next()) {
                productModel.addRow(new Object[]{rs.getString("name"), rs.getString("quantity"), rs.getString("price"), rs.getString("expirationDate")});
            }
            rs = st.executeQuery("select *from batch");
            while (rs.next()) {
                batchModel.addRow(new Object[]{rs.getString("name"), rs.getString("quantity"), rs.getString("price"), rs.getString("expirationDate")});
            }
            rs = st.executeQuery("select *from batchone");
            while (rs.next()) {
                batchoneModel.addRow(new Object[]{rs.getString("name"), rs.getString("quantity"), rs.getString("price"), rs.getString("expirationDate")});
            }
            rs = st.executeQuery("select *from batchtwo");
            while (rs.next()) {
                batchtwoModel.addRow(new Object[]{rs.getString("name"), rs.getString("quantity"), rs.getString("price"), rs.getString("expirationDate")});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }
    }//GEN-LAST:event_formComponentShown

    private void txtBalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBalActionPerformed

    private void tableCartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCartMouseClicked
        // TODO add your handling code here:
        int index = tableCart.getSelectedRow();
        int a = JOptionPane.showConfirmDialog(null, "Do you want to remove this product", "Select", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            TableModel model = tableCart.getModel();
            String subTotal = model.getValueAt(index, 4).toString();
            finalTotalPrice = finalTotalPrice - Integer.parseInt(subTotal);
            txtTotal.setText(String.valueOf(finalTotalPrice));
            ((DefaultTableModel) tableCart.getModel()).removeRow(index);
        }
    }//GEN-LAST:event_tableCartMouseClicked

    private void tableProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductMouseClicked
        // TODO add your handling code here:
        int index = tableProduct.getSelectedRow();
        TableModel model = tableProduct.getModel();

        String name = model.getValueAt(index, 0).toString();
        txtProductName.setText(name);

        String productPrice = model.getValueAt(index, 2).toString();
        txtProductPrice.setText(productPrice);

        String productExpirationDate = model.getValueAt(index, 3).toString();
        txtProductExpired.setText(productExpirationDate);

    }//GEN-LAST:event_tableProductMouseClicked

    private void btncloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncloseActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_btncloseActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed

        // TODO add your handling code here:
        String noOfUnits = txtOrderQuantity.getText();
        if (!noOfUnits.equals("")) {
            String productName = txtProductName.getText(); // Selected product
            String productExpired = txtProductExpired.getText();
            String productPrice = txtProductPrice.getText();

            int totalPrice = Integer.parseInt(noOfUnits) * Integer.parseInt(productPrice);

            int checkStock = 0; // Initialize as no stock
            int checkProductAlreadyExistInCart = 0;

            try {
                Connection con = MyConnection.getConnection();
                Statement st = con.createStatement();

                // Query to combine all tables but only for the selected product
                String query = "SELECT 'product' AS source_table, name, quantity FROM product WHERE name = '" + productName + "' "
                        + "UNION ALL "
                        + "SELECT 'batch' AS source_table, name, quantity FROM batch WHERE name = '" + productName + "' "
                        + "UNION ALL "
                        + "SELECT 'batchone' AS source_table, name, quantity FROM batchone WHERE name = '" + productName + "' "
                        + "UNION ALL "
                        + "SELECT 'batchtwo' AS source_table, name, quantity FROM batchtwo WHERE name = '" + productName + "'";

                ResultSet rs = st.executeQuery(query);

                while (rs.next()) {
                    if (rs.getInt("quantity") >= Integer.parseInt(noOfUnits)) {
                        checkStock = 1; // Stock available
                        break;
                    } else {
                        JOptionPane.showMessageDialog(null, "Product is out of stock in " + rs.getString("source_table")
                                + ". Only " + rs.getInt("quantity") + " left.");
                    }
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                return;
            }

            // Check if the product is expired
            if (!productExpired.isEmpty() && LocalDate.parse(productExpired).isBefore(LocalDate.now())) {
                JOptionPane.showMessageDialog(null, "Warning: The product \"" + productName + "\" is expired. It cannot be added to the cart.");
                return; // Stop the process if the product is expired
            }

            if (checkStock == 1) {
                DefaultTableModel model = (DefaultTableModel) tableCart.getModel();

                // Check if the product already exists in the cart
                for (int i = 0; i < tableCart.getRowCount(); i++) {
                    if (model.getValueAt(i, 0).toString().equals(productName)) {
                        checkProductAlreadyExistInCart = 1;
                        JOptionPane.showMessageDialog(null, "Product already exists in cart.");
                        break;
                    }
                }

                if (checkProductAlreadyExistInCart == 0) {
                    model.addRow(new Object[]{productName, noOfUnits, productPrice, productExpired, totalPrice});
                    finalTotalPrice += totalPrice;
                    txtTotal.setText("₱" + finalTotalPrice);
                    JOptionPane.showMessageDialog(null, "Product added to cart successfully.");
                }

                clearProduct();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No quantity or product field is required.");
        }


    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void txtOrderQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderQuantityActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // TODO add your handling code here:
        setVisible(false);
        new ManageOrder().setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnSaveOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveOrderActionPerformed
        // TODO add your handling code here:
       calculateBalance();

        // Generate a unique order ID
        // Generate a unique order ID
        String orderDateTime = new SimpleDateFormat("yyyy-MM-dd - HH:mm:ss").format(new Date()); // Include time
        double totalPaid = 0.0;

// Calculate totalPaid from tableCart
        DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            totalPaid += Double.parseDouble(model.getValueAt(i, 4).toString()); // Assuming column 4 is total price
        }

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No products in the cart.");
            return;
        }

        boolean transactionCompleted = false;

        try {
            // Database connection
            Connection con = MyConnection.getConnection();

            // Insert into orderdetail table
            String query = "INSERT INTO orderdetail (expirationDate, totalPrice) VALUES (?, ?)";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, orderDateTime); // Current date and time
            ps.setDouble(2, totalPaid); // Total paid amount

            // Execute the update
            ps.executeUpdate();

            // Update product quantities based on the cart
            for (int i = 0; i < model.getRowCount(); i++) {
                String productName = model.getValueAt(i, 0).toString(); // Assuming column 0 is product name
                int purchasedQuantity = Integer.parseInt(model.getValueAt(i, 1).toString()); // Assuming column 1 is quantity

                // List of tables to update
                String[] tables = {"product", "batch", "batchone", "batchtwo"};

                for (String table : tables) {
                    // Check if the product exists in the current table
                    String checkQuery = "SELECT quantity FROM " + table + " WHERE name = ?";
                    PreparedStatement checkPs = con.prepareStatement(checkQuery);
                    checkPs.setString(1, productName);
                    ResultSet rs = checkPs.executeQuery();

                    if (rs.next()) {
                        int currentQuantity = rs.getInt("quantity");
                        if (currentQuantity >= purchasedQuantity) {
                            // Update the quantity in the current table
                            String updateQuery = "UPDATE " + table + " SET quantity = quantity - ? WHERE name = ?";
                            PreparedStatement updatePs = con.prepareStatement(updateQuery);
                            updatePs.setInt(1, purchasedQuantity);
                            updatePs.setString(2, productName);
                            updatePs.executeUpdate();
                            break; // Stop checking other tables once the update is done
                        } else {
                            JOptionPane.showMessageDialog(null, "Insufficient stock for product '" + productName + "' in table " + table + ".");
                            return;
                        }
                    }
                }
            }

            transactionCompleted = true; // Mark the transaction as completed
            JOptionPane.showMessageDialog(null, "Transaction added successfully.");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error saving transaction: " + e.getMessage());
        }

        if (!transactionCompleted) {
            JOptionPane.showMessageDialog(null, "Transaction was not completed. Please resolve issues and try again.");
        }

    }//GEN-LAST:event_btnSaveOrderActionPerformed

    private void txtProductExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductExpiredActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductExpiredActionPerformed

    private void txtProductPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductPriceActionPerformed

    private void txtProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductNameActionPerformed

    private void txtPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPayActionPerformed

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void tableProductMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_tableProductMouseEntered

    private void btnSaveOrderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveOrderMouseEntered
        // TODO add your handling code here:
        btnSaveOrder.setBackground(Color.red);
    }//GEN-LAST:event_btnSaveOrderMouseEntered

    private void btnSaveOrderMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveOrderMouseExited
        // TODO add your handling code here:
        btnSaveOrder.setBackground(new Color(0, 20, 82));
    }//GEN-LAST:event_btnSaveOrderMouseExited

    private void btnAddToCartMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddToCartMouseEntered
        // TODO add your handling code here:
        btnAddToCart.setBackground(Color.red);
    }//GEN-LAST:event_btnAddToCartMouseEntered

    private void btnAddToCartMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddToCartMouseExited
        // TODO add your handling code here:
        btnAddToCart.setBackground(new Color(0, 20, 82));

    }//GEN-LAST:event_btnAddToCartMouseExited

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        // TODO add your handling code here:
        jButton2.setBackground(Color.red);
    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited
        // TODO add your handling code here:
        jButton2.setBackground(new Color(0, 20, 82));
    }//GEN-LAST:event_jButton2MouseExited

    private void tableProductMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_tableProductMouseExited

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        new ManageProduct().setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        new Batch1().setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        new Batch2().setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        new Batch3().setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenu10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu10ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        new ViewOrder().setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageOrder().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnSaveOrder;
    private javax.swing.JButton btnclose;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tableCart;
    private javax.swing.JTable tableProduct;
    private javax.swing.JTextField txtBal;
    private javax.swing.JTextField txtOrderQuantity;
    private javax.swing.JTextField txtPay;
    private javax.swing.JTextField txtProductExpired;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtProductPrice;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
